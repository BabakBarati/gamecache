# Dockerfile for an Alpine-based image - potentially smaller, but can be more complex.

# Use an Alpine-based Python base image
FROM python:3.13-alpine

# Install dependencies using Alpine's 'apk' package manager.
# - nginx, gettext, cron, curl are for the application.
# - build-base, python3-dev, libffi-dev are build tools that may be required
#   to compile Python packages from source.
RUN apk add --no-cache nginx gettext dcron curl build-base python3-dev libffi-dev

WORKDIR /app

# Copy application code and scripts
COPY . .

# Change ownership of app files to the nginx user
# Note: The default nginx user on Alpine is 'nginx'
RUN chown -R nginx:nginx /app

# Install Python dependencies
RUN pip install --no-cache-dir -r scripts/requirements.txt

# Make the scripts executable
# RUN chmod +x entrypoint.sh update_db.sh
RUN chmod +x update_db.sh

# Set default port
ENV PORT=8064

# Expose the port
EXPOSE $PORT

# Health check to ensure the server is responsive
HEALTHCHECK --interval=1m --timeout=3s \
  CMD curl --fail http://localhost:${PORT}/ || exit 1

# Set the entrypoint
ENTRYPOINT ["python", "/app/entrypoint.py"]

